import datetime
import time
import re

from django.db.models import Q
from django.http import HttpResponseRedirect, HttpResponse
from django.shortcuts import render_to_response, get_object_or_404
from django.core.urlresolvers import reverse
from django.contrib.auth import authenticate, login, logout
from django.core.paginator import Paginator, InvalidPage, EmptyPage
from django.template import Context, loader, RequestContext
from django.contrib.auth.decorators import login_required

from opm.settings import UPLOAD_DIR
from opm.project_list.models import Contact
from opm.project_list.models import Battery
from opm.project_list.models import Pack
from opm.project_list.models import Sample
from opm.project_list.models import Quote
from opm.project_list.models import QuoteRow
from opm.project_list.models import SPR
from opm.project_list.models import SPRRow
from opm.project_list.models import Visit
from opm.project_list.models import Project
from opm.project_list.models import Upload
from opm.project_list.models import Link

from opm.project_list.forms import ContactSearchForm
from opm.project_list.forms import ContactEditForm
from opm.project_list.forms import ProjectSearchForm
from opm.project_list.forms import ProjectEditForm
from opm.project_list.forms import SampleEditForm
from opm.project_list.forms import NonRequiredAddressForm
from opm.project_list.forms import RequiredAddressForm
from opm.project_list.forms import QuoteEditForm
from opm.project_list.forms import SprEditForm
from opm.project_list.forms import LogInForm
from opm.project_list.forms import SearchForm
from opm.project_list.forms import BatteryEditForm
from opm.project_list.forms import PackEditForm
from opm.project_list.forms import UploadEditForm

#LogIn & LogOut VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
def login_view(request):
	# forward the user to the welcome page if they are logged in
	if request.user.is_authenticated():
		return HttpResponseRedirect( reverse('project_list') )
	# if they're not logged in already they must complete the sign in form
	form = LogInForm()
	if request.method == 'POST':
		form = LogInForm(request.POST)
		if form.is_valid():
			username = request.POST.get('username')
			password = request.POST.get('password')
			user = authenticate(username = username, password = password)
			if user.is_active:
				login(request, user)
				return HttpResponseRedirect(reverse('project_list'))
			else:
				raise "Account is disabled"
				return render_to_response('login.html', {'form':form, 'user':user})
		else:
			return render_to_response('login.html', {'form':form})
	else:
		return render_to_response('login.html', {'form':form})

def logout_view(request):
	logout(request)
	# redirect the user back to the login page	
	return HttpResponseRedirect( reverse('login') )


#PROJECT VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def project_list(request):
	tab = 'project'
	user = request.user
	user = request.user
	form = ProjectSearchForm()
	list = Project.objects.all()
		
	if request.method == 'POST':
		form = ProjectSearchForm(request.POST)
		list = Project.objects.all()
		if form.is_valid():
			division = request.POST.get('division') 
			region = request.POST.get('region')
			market_segment = request.POST.get('market_segment')
			customer = request.POST.get('customer')
			sales_potential = request.POST.get('sales_potential')
			if division != 'None':
				list = list.filter(division = division)
			if region != 'None':
				list = list.filter(region = region)
			if market_segment != 'None':
				list = list.filter(market_segment = market_segment)
			if customer:
				list = list.filter(customer__iexact = customer)
			if sales_potential:
				list = list.filter(sales_potential__gte = int(sales_potential))
		return render_to_response('project_list.html',{'tab':tab, 'list':list, 'user':user, 'form':form}, context_instance=RequestContext(request))
	else:
		return render_to_response('project_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user}, context_instance=RequestContext(request))

@login_required
def project_new(request):
	tab = 'project'
	user = request.user
	if request.method == 'POST':
		form = ProjectEditForm(request.POST)
		if form.is_valid():
			status = form.cleaned_data['status']
			division = form.cleaned_data['division'] 
			region = form.cleaned_data['region'] 
			market_segment = form.cleaned_data['market_segment'] 
			customer = form.cleaned_data['customer'] 
			battery_description = form.cleaned_data['battery_description'] 
			prototype_verification = form.cleaned_data['prototype_verification']
			design_verification = form.cleaned_data['design_verification']
			manufacturing_verification = form.cleaned_data['manufacturing_verification']
			production_verification = form.cleaned_data['production_verification']
			end_of_life = form.cleaned_data['end_of_life']
			battery_description = form.cleaned_data['battery_description'] 
			if form.cleaned_data['vkb_number']:
				vkb_number = form.cleaned_data['vkb_number']
				battery_pack = Pack.objects.get(vkb_number = vkb_number)
				battery = battery_pack.battery
			else:
				battery_pack = None
			if form.cleaned_data['type_number']: 
				type_number = form.cleaned_data['type_number'] 
				battery = Battery.objects.get(type_number = type_number)
			if not form.cleaned_data['type_number'] and not form.cleaned_data['vkb_number']:
				battery = None
			if form.cleaned_data['sales_potential']:
				sales_potential = form.cleaned_data['sales_potential']
			else:
				sales_potential = None
			if form.cleaned_data['primary_contact_id']:
				primary_contact = Contact.objects.get(id = form.cleaned_data['primary_contact_id'])
			else:
				primary_contact = None
			if form.cleaned_data['sales_rep_id']:
				sales_rep = Contact.objects.get(id = form.cleaned_data['sales_rep_id'])
			else:
				sales_rep = None
			if form.cleaned_data['project_manager_id']:
				project_manager = Contact.objects.get(id = form.cleaned_data['project_manager_id'])
			else:
				project_manager = None
			notes = form.cleaned_data['notes']
			new_project = Project(status = status,
					division = division, 
					region = region, 
					market_segment = market_segment, 
					customer = customer, 
					battery_description = battery_description, 
					battery_pack = battery_pack, 
					battery = battery, 
					sales_potential = sales_potential, 
					primary_contact =primary_contact , 
					sales_rep =sales_rep , 
					project_manager =project_manager , 
					prototype_verification =prototype_verification ,
					design_verification =design_verification , 
					manufacturing_verification =manufacturing_verification , 
					production_verification =production_verification , 
					end_of_life =end_of_life, 
					notes = notes)
			new_project.save()
			return HttpResponseRedirect(reverse('project_list'))
	else:
		form = ProjectEditForm()
	return render_to_response('project_new.html',{'tab':tab, 'form':form, 'user':user})

@login_required
def project_edit(request, id):
	tab = 'project'
	user = request.user
	"""
	Passes the existing information for a Project form
	Allows for the existing information to be changed
	"""
	user = request.user
	project = Project.objects.get(id = id)
	initial = {
		'status':project.status,
		'division':project.division,
		'region':project.region,
		'market_segment':project.market_segment,
		'customer':project.customer,
		'battery_description':project.battery_description,
		'sales_potential':project.sales_potential,
		'prototype_verification':project.prototype_verification,
		'design_verification':project.design_verification,
		'manufacturing_verification':project.manufacturing_verification,
		'production_verification':project.production_verification,
		'end_of_life':project.end_of_life,
		'notes':project.notes
		}
	if project.battery:
		initial['type_number'] = project.battery.type_number
	if project.battery_pack:
		initial['vkb_number'] = project.battery_pack.vkb_number
	if project.primary_contact:
		initial['primary_contact_name']= project.primary_contact.firstname+' '+project.primary_contact.lastname
		initial['primary_contact_id']=project.primary_contact.id
	if project.sales_rep:
		initial['sales_rep_name']=project.sales_rep.firstname+' '+project.sales_rep.lastname
		initial['sales_rep_id']=project.sales_rep.id
	if project.project_manager:
		initial['project_manager_name']=project.project_manager.firstname+' '+project.project_manager.lastname
		initial['project_manager_id']=project.project_manager.id
	if request.method == 'POST':
		form = ProjectEditForm(request.POST)
		if form.is_valid():
			status = form.cleaned_data['status']
			division = form.cleaned_data['division'] 
			region = form.cleaned_data['region'] 
			market_segment = form.cleaned_data['market_segment'] 
			customer = form.cleaned_data['customer'] 
			battery_description = form.cleaned_data['battery_description'] 
			prototype_verification = form.cleaned_data['prototype_verification']
			design_verification = form.cleaned_data['design_verification']
			manufacturing_verification = form.cleaned_data['manufacturing_verification']
			production_verification = form.cleaned_data['production_verification']
			end_of_life = form.cleaned_data['end_of_life']
			if form.cleaned_data['vkb_number']:
				vkb_number = form.cleaned_data['vkb_number']
				battery_pack = Pack.objects.get(vkb_number = vkb_number)
				battery = battery_pack.battery
			else:
				battery_pack = None
			if form.cleaned_data['type_number']: 
				type_number = form.cleaned_data['type_number'] 
				battery = Battery.objects.get(type_number = type_number)
			if not form.cleaned_data['type_number'] and not form.cleaned_data['vkb_number']:
				battery = None
			if form.cleaned_data['sales_potential']:
				sales_potential = form.cleaned_data['sales_potential']
			else:
				sales_potential = None
			if form.cleaned_data['primary_contact_id']:
				primary_contact = Contact.objects.get(id = form.cleaned_data['primary_contact_id'])
			else:
				primary_contact = None
			if form.cleaned_data['sales_rep_id']:
				sales_rep = Contact.objects.get(id = form.cleaned_data['sales_rep_id'])
			else:
				sales_rep = None
			if form.cleaned_data['project_manager_id']:
				project_manager = Contact.objects.get(id = form.cleaned_data['project_manager_id'])
			else:
				project_manager = None
			notes = form.cleaned_data['notes']
			updated_project = Project(id = id,
					status = status, 
					division = division, 
					region = region, 
					market_segment = market_segment, 
					customer = customer, 
					battery_description = battery_description, 
					battery_pack = battery_pack, 
					battery = battery, 
					sales_potential = sales_potential, 
					primary_contact =primary_contact , 
					sales_rep =sales_rep , 
					project_manager =project_manager , 
					prototype_verification =prototype_verification ,
					design_verification =design_verification ,
					manufacturing_verification =manufacturing_verification , 
					production_verification =production_verification , 
					end_of_life =end_of_life, 
					notes = notes)
			updated_project.save()
			return HttpResponseRedirect(reverse('project_list'))
	else:
		form = ProjectEditForm(initial = initial)
	return render_to_response('project_edit.html',{'tab':tab, 'form':form, 'user':user, 'project':project})

#BATTERY VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def pack_new(request):
	tab = 'battery'
	user = request.user
	if request.method == 'POST':
		form = PackEditForm(request.POST, request.FILES)
		if form.is_valid():
			drawing = request.FILES['drawing']
			vkb_number,battery = form.cleaned_data['vkb_number']
			chemistry = form.cleaned_data['chemistry']
			type = form.cleaned_data['type']
			configuration = form.cleaned_data['configuration']
			series_cells = form.cleaned_data['series_cells']
			parallel_cells = form.cleaned_data['parallel_cells']
			capacity = form.cleaned_data['capacity']
			voltage = form.cleaned_data['voltage']
			max_cont = form.cleaned_data['max_cont']
			max_pulse = form.cleaned_data['max_pulse']
			pack, created = Pack.objects.get_or_create(vkb_number = vkb_number)
			if created:
				pack.battery = battery
				pack.vkb_number = vkb_number
				pack.drawing = vkb_number
				pack.chemistry = chemistry
				pack.type = type
				pack.configuration = configuration
				pack.series_cells = series_cells
				pack.parallel_cells = parallel_cells
				pack.capacity = capacity
				pack.voltage = voltage
				pack.max_cont = max_cont
				pack.max_pulse = max_pulse
			pack.save()
			pack.drawing.save(vkb_number+'.pdf', drawing)
			return HttpResponseRedirect(reverse('pack_list', args = [battery.type_number]))
	else:
		form = PackEditForm()
	return render_to_response('pack_new.html', {'tab':tab,'form': form, 'user':user})

@login_required
def pack_list(request, type_number):
	tab = 'battery'
	user = request.user
	battery = Battery.objects.get(type_number = type_number)
	list = battery.pack_set.all()
	return render_to_response('pack_list.html', {'tab':tab,'list':list,'battery':battery}, context_instance=RequestContext(request))

@login_required
def pack_edit(request, vkb_number):
	tab = 'battery'
	user = request.user
	pack = Pack.objects.get(vkb_number = vkb_number)
	projects = Project.objects.filter(Q(battery_pack = pack))
	form = PackEditForm(initial = {
			'vkb_number':pack.vkb_number, 
			'chemistry':pack.chemistry, 
			'type':pack.type, 
			'configuration':pack.configuration, 
			'series_cells':pack.series_cells, 
			'parallel_cells':pack.parallel_cells, 
			'capacity':pack.capacity, 
			'voltage':pack.voltage, 
			'max_cont':pack.max_cont, 
			'max_pulse':pack.max_pulse 
		})
	if request.method == 'POST':
		form = PackEditForm(request.POST, request.FILES)
		if form.is_valid():
			vkb_number,battery = form.cleaned_data['vkb_number']
			chemistry = form.cleaned_data['chemistry']
			type = form.cleaned_data['type']
			configuration = form.cleaned_data['configuration']
			series_cells = form.cleaned_data['series_cells']
			parallel_cells = form.cleaned_data['parallel_cells']
			capacity = form.cleaned_data['capacity']
			voltage = form.cleaned_data['voltage']
			max_cont = form.cleaned_data['max_cont']
			max_pulse = form.cleaned_data['max_pulse']
			pack, created = Pack.objects.get_or_create(vkb_number = vkb_number)
			if not created:
				pack.battery = battery
				pack.vkb_number = vkb_number
				pack.drawing = vkb_number
				pack.chemistry = chemistry
				pack.type = type
				pack.configuration = configuration
				pack.series_cells = series_cells
				pack.parallel_cells = parallel_cells
				pack.capacity = capacity
				pack.voltage = voltage
				pack.max_cont = max_cont
				pack.max_pulse = max_pulse
			pack.save()
			if request.FILES:
				drawing = request.FILES['drawing']
				pack.drawing.save(vkb_number, drawing)
			return HttpResponseRedirect(reverse('pack_list', args = [battery.type_number]))
	return render_to_response('pack_edit.html', {'tab':tab,'form': form, 'user':user, 'projects':projects, 'pack':pack})

@login_required
def battery_new(request):
	tab = 'battery'
	user = request.user
	if request.method == 'POST':
		form = BatteryEditForm(request.POST, request.FILES)
		if form.is_valid():
			datasheet = request.FILES['datasheet']
			type_number = form.cleaned_data['type_number']
			type_description = form.cleaned_data['type_description']
			chemistry = form.cleaned_data['chemistry']
			type = form.cleaned_data['type']
			capacity = form.cleaned_data['capacity']
			voltage = form.cleaned_data['voltage']
			max_cont = form.cleaned_data['max_cont']
			max_pulse = form.cleaned_data['max_pulse']
			min_storage_temp = form.cleaned_data['min_storage_temp']
			max_storage_temp = form.cleaned_data['max_storage_temp']
			min_discharge_temp = form.cleaned_data['min_discharge_temp']
			max_discharge_temp = form.cleaned_data['max_discharge_temp']
			min_charge_temp = form.cleaned_data['min_charge_temp']
			max_charge_temp = form.cleaned_data['max_charge_temp']
			discontinued = form.cleaned_data['discontinued']
			battery, created = Battery.objects.get_or_create(type_number = type_number)
			if created:
				battery.type_number = type_number
				battery.type_description = type_description
				battery.chemistry = chemistry
				battery.type = type
				battery.capacity = capacity
				battery.voltage = voltage
				battery.max_cont = max_cont
				battery.max_pulse = max_pulse
				battery.min_storage_temp = min_storage_temp
				battery.max_storage_temp = max_storage_temp
				battery.min_discharge_temp = min_discharge_temp
				battery.max_discharge_temp = max_discharge_temp
				battery.min_charge_temp = min_charge_temp
				battery.max_charge_temp = max_charge_temp
				battery.discontinued = discontinued
				battery.save()
				if re.match(r'^\d{4}$', type_number):
					battery.datasheet.save('0'+type_number+'.pdf', datasheet)
				elif re.match(r'^\d{5}$', type_number): 
					battery.datasheet.save(type_number+'.pdf', datasheet)
			return HttpResponseRedirect(reverse('battery_list', args=['None','None']))
	else:
		form = BatteryEditForm()
	return render_to_response('battery_new.html', {'tab':tab,'form': form, 'user':user})


@login_required
def battery_list(request, value, selection):
	tab = 'battery'
	user = request.user
	if value == 'type':
		if selection == 'Discontinued':
			list = Battery.objects.filter(discontinued = True)
		else:	
			list = Battery.objects.filter(type = selection)
	elif value == 'chemistry':
		list = Battery.objects.filter(chemistry = selection)
	else:
		list = Battery.objects.all()
	return render_to_response('battery_list.html', {'tab':tab, 'tab':tab,'list':list}, context_instance=RequestContext(request))
#CONTACT VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def contact_list(request):
	tab='contact'
	user = request.user
	form = ContactSearchForm()
	list = Contact.objects.all()
	if request.method == 'POST':
		form = ContactSearchForm(request.POST)
		list = Contact.objects.all()
		if form.is_valid():
			name = request.POST.get('name') 
			phone = request.POST.get('phone')
			email = request.POST.get('email')
			if name:
				list = list.filter(Q(firstname__iexact = name)|Q(lastname__iexact = name)|Q(company__iexact = name))
			if phone:
				list = list.filter(Q(cell = phone)|Q(landline = phone))
			if email:
				list = list.filter(email = email)
		return render_to_response('contact_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user}, context_instance=RequestContext(request))
	else:
		return render_to_response('contact_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user}, context_instance=RequestContext(request))

@login_required
def contact_new(request):
	tab='contact'
	user = request.user
	if request.method == 'POST':
		form = ContactEditForm(request.POST)
		if form.is_valid():
			firstname = request.POST.get('firstname')
			lastname = request.POST.get('lastname')
			company = request.POST.get('company')
			title = request.POST.get('title')
			cell = request.POST.get('cell')
			landline = request.POST.get('landline')
			fax = request.POST.get('fax')
			email = request.POST.get('email')
			primary_address_line1 = request.POST.get('primary_address_line1')
			primary_address_line2 = request.POST.get('primary_address_line2')
			primary_state = request.POST.get('primary_state')
			primary_city = request.POST.get('primary_city')
			primary_post_code = request.POST.get('primary_post_code')
			secondary_address_line1 = request.POST.get('secondary_address_line1')
			secondary_address_line2 = request.POST.get('secondary_address_line2')
			secondary_state = request.POST.get('secondary_state')
			secondary_city = request.POST.get('secondary_city')
			secondary_post_code = request.POST.get('secondary_post_code')
		
			cell = Contact.clean_phone(cell)
			landline = Contact.clean_phone(landline)
			fax = Contact.clean_phone(fax)

			new_contact = Contact(firstname = firstname, lastname = lastname, company = company, title = title, cell = cell, landline = landline , fax = fax , email = email , primary_address_line1 = primary_address_line1 , primary_address_line2 = primary_address_line2 , primary_state = primary_state , primary_city = primary_city , primary_post_code = primary_post_code , secondary_address_line1 = secondary_address_line1 , secondary_address_line2 = secondary_address_line2 , secondary_state = secondary_state , secondary_city = secondary_city , secondary_post_code = secondary_post_code )
			new_contact.save()
			return HttpResponseRedirect(reverse('contact_list'))
	else:
		form = ContactEditForm()
	return render_to_response('contact_new.html',{'tab':tab, 'form':form, 'user':user})

@login_required
def contact_new_popup(request):
	tab='contact'
	user = request.user
	form = ContactEditForm()
	if request.method == 'POST':
		form = ContactEditForm(request.POST)
		if form.is_valid():
			firstname = request.POST.get('firstname')
			lastname = request.POST.get('lastname')
			company = request.POST.get('company')
			title = request.POST.get('title')
			cell = request.POST.get('cell')
			landline = request.POST.get('landline')
			fax = request.POST.get('fax')
			email = request.POST.get('email')
			primary_address_line1 = request.POST.get('primary_address_line1')
			primary_address_line2 = request.POST.get('primary_address_line2')
			primary_state = request.POST.get('primary_state')
			primary_city = request.POST.get('primary_city')
			primary_post_code = request.POST.get('primary_post_code')
			secondary_address_line1 = request.POST.get('secondary_address_line1')
			secondary_address_line2 = request.POST.get('secondary_address_line2')
			secondary_state = request.POST.get('secondary_state')
			secondary_city = request.POST.get('secondary_city')
			secondary_post_code = request.POST.get('secondary_post_code')
		
			cell = Contact.clean_phone(cell)
			landline = Contact.clean_phone(landline)
			fax = Contact.clean_phone(fax)

			new_contact = Contact(firstname = firstname, lastname = lastname, company = company, title = title, cell = cell, landline = landline , fax = fax , email = email , primary_address_line1 = primary_address_line1 , primary_address_line2 = primary_address_line2 , primary_state = primary_state , primary_city = primary_city , primary_post_code = primary_post_code , secondary_address_line1 = secondary_address_line1 , secondary_address_line2 = secondary_address_line2 , secondary_state = secondary_state , secondary_city = secondary_city , secondary_post_code = secondary_post_code )
			new_contact.save()
		return render_to_response('contact_new_popup.html',{'tab':tab, 'form':form, 'user':user})
	else:
		return render_to_response('contact_new_popup.html',{'tab':tab, 'form':form, 'user':user})

@login_required
def contact_edit(request, id):
	tab='contact'
	user = request.user
	"""
	Passes the existing information for a Contact
	Allows for the existing information to be changed
	"""
	contact = Contact.objects.get(id = id)
	form = ContactEditForm(initial = {'firstname':contact.firstname, 
		'lastname':contact.lastname, 
		'company':contact.company, 
		'title':contact.title, 
		'cell':contact.cell, 
		'landline':contact.landline, 
		'fax':contact.fax, 
		'email':contact.email, 
		'primary_address_line1':contact.primary_address_line1, 
		'primary_address_line2':contact.primary_address_line2, 
		'primary_state':contact.primary_state, 
		'primary_city':contact.primary_city, 
		'primary_post_code':contact.primary_post_code, 
		'secondary_address_line1':contact.secondary_address_line1, 
		'secondary_address_line2':contact.secondary_address_line2, 
		'secondary_state':contact.secondary_state, 
		'secondary_city':contact.secondary_city, 
		'secondary_post_code':contact.secondary_post_code
		})
	projects = Project.objects.filter(Q(primary_contact = contact)|Q(sales_rep = contact)|Q(project_manager = contact))
	samples = Sample.objects.filter(Q(author = contact)|Q(ship_to_contact = contact)|Q(end_user_contact = contact))
	quotes = Quote.objects.filter(Q(author = contact)|Q(recipient = contact)|Q(signature1 = contact)|Q(signature2 = contact)|Q(signature3 = contact))
	if request.method == 'POST':
		form = ContactEditForm(request.POST)
		if form.is_valid():
			firstname = request.POST.get('firstname')
			lastname = request.POST.get('lastname')
			company = request.POST.get('company')
			title = request.POST.get('title')
			cell = request.POST.get('cell')
			landline = request.POST.get('landline')
			fax = request.POST.get('fax')
			email = request.POST.get('email')
			primary_address_line1 = request.POST.get('primary_address_line1')
			primary_address_line2 = request.POST.get('primary_address_line2')
			primary_state = request.POST.get('primary_state')
			primary_city = request.POST.get('primary_city')
			primary_post_code = request.POST.get('primary_post_code')
			secondary_address_line1 = request.POST.get('secondary_address_line1')
			secondary_address_line2 = request.POST.get('secondary_address_line2')
			secondary_state = request.POST.get('secondary_state')
			secondary_city = request.POST.get('secondary_city')
			secondary_post_code = request.POST.get('secondary_post_code')
		
			cell = Contact.clean_phone(cell)
			landline = Contact.clean_phone(landline)
			fax = Contact.clean_phone(fax)

			new_contact = Contact(id = id, firstname = firstname, lastname = lastname, company = company, title = title, cell = cell, landline = landline , fax = fax , email = email , primary_address_line1 = primary_address_line1 , primary_address_line2 = primary_address_line2 , primary_state = primary_state , primary_city = primary_city , primary_post_code = primary_post_code , secondary_address_line1 = secondary_address_line1 , secondary_address_line2 = secondary_address_line2 , secondary_state = secondary_state , secondary_city = secondary_city , secondary_post_code = secondary_post_code )
			new_contact.save()
		return HttpResponseRedirect(reverse('contact_list'))
	else:
		return render_to_response('contact_edit.html',{'tab':tab, 'form':form, 'user':user,'projects':projects, 'contact':contact})

@login_required
def contact_add_popup(request, contact_type):
	tab='contact'
	user = request.user
	form = SearchForm()
	if request.method == 'GET':
		list = []
		form = SearchForm(request.GET)
		if form.is_valid():
			search = request.GET.get('search') 
			if search:
				list = Contact.objects.filter(Q(firstname__iexact = search)|Q(lastname__iexact = search)|Q(company__iexact = search))
		return render_to_response('contact_add_popup.html',{'tab':tab, 'list':list, 'form':form, 'user':user, 'contact_type':contact_type})
	else:
		return render_to_response('contact_add_popup.html',{'tab':tab, 'form':form, 'user':user,})

#SAMPLE VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def sample_list(request):
	tab = 'sample'
	user = request.user
	form = SearchForm()
	list = Sample.objects.all()
	if request.method == 'GET':
		form = SearchForm(request.GET)
		if form.is_valid():
			search = request.GET.get('search') 
			if re.match('\d+', search):
				list = Sample.objects.filter(Q(sample_number = search))
			else:
				list = Sample.objects.filter(
					Q(end_user_company = search)|
					Q(ship_to_company = search)
				)
		return render_to_response('sample_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user}, context_instance=RequestContext(request))
	else:
		return render_to_response('sample_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user}, context_instance=RequestContext(request))


@login_required
def sample_new_independent(request):
	tab = 'sample'
	user = request.user
	today = datetime.date.today()
	form = SampleEditForm(initial = {
		'date' : today.strftime("%m/%d/%Y")
		})
	ship_to_form = RequiredAddressForm()
	end_user_form = NonRequiredAddressForm()

	if request.method == 'POST':
		form = SampleEditForm(request.POST)
		ship_to_form = RequiredAddressForm(request.POST)
		end_user_form = NonRequiredAddressForm(request.POST)
		if form.is_valid() and ship_to_form.is_valid() and end_user_form.is_valid():
			date = form.cleaned_data['date'] 
			battery = form.cleaned_data['battery'] 
			engineer = form.cleaned_data['engineer']
			inside_sales = form.cleaned_data['inside_sales']
			ship_to_company = ship_to_form.cleaned_data['required_company'] 
			ship_to_attention = ship_to_form.cleaned_data['required_attention'] 
			ship_to_address_line1 = ship_to_form.cleaned_data['required_address_line1'] 
			ship_to_address_line2 = ship_to_form.cleaned_data['required_address_line2'] 
			ship_to_city = ship_to_form.cleaned_data['required_city'] 
			ship_to_state = ship_to_form.cleaned_data['required_state'] 
			ship_to_post_code = ship_to_form.cleaned_data['required_post_code'] 
			ship_to_phone = ship_to_form.cleaned_data['required_phone'] 
			end_user_company = end_user_form.cleaned_data['non_required_company'] 
			end_user_attention = end_user_form.cleaned_data['non_required_attention'] 
			end_user_address_line1 = end_user_form.cleaned_data['non_required_address_line1'] 
			end_user_address_line2 = end_user_form.cleaned_data['non_required_address_line2'] 
			end_user_city = end_user_form.cleaned_data['non_required_city'] 
			end_user_state = end_user_form.cleaned_data['non_required_state'] 
			end_user_post_code = end_user_form.cleaned_data['non_required_post_code'] 
			end_user_phone = end_user_form.cleaned_data['non_required_phone'] 


			sample_number = Sample.get_sample_number()

			new_sample = Sample(
					date = date,
					sample_number = sample_number,
					authored_date = today,
					edited_date = today,
					author = Contact.objects.get(user = user),
					editor = Contact.objects.get(user = user),
					battery = battery,
					engineer = engineer,
					inside_sales = inside_sales,
					ship_to_company = ship_to_company,
					ship_to_attention = ship_to_attention,
					ship_to_address_line1 = ship_to_address_line1,
					ship_to_address_line2 = ship_to_address_line2,
					ship_to_city = ship_to_city,
					ship_to_state = ship_to_state,
					ship_to_post_code = ship_to_post_code,
					ship_to_phone = ship_to_phone,
					end_user_company = end_user_company,
					end_user_attention = end_user_attention,
					end_user_address_line1 = end_user_address_line1,
					end_user_address_line2 = end_user_address_line2,
					end_user_city = end_user_city,
					end_user_state = end_user_state,
					end_user_post_code = end_user_post_code,
					end_user_phone = end_user_phone,
					)
			new_sample.save()
			c = Context({'sample':new_sample})
			t = loader.get_template('xml/sample-base.xml')
			render_xml = t.render(c)
			response = HttpResponse(render_xml, mimetype='application/ms-word')
			response['Content-Disposition'] = 'attachment; filename='+ship_to_attention+'-sample.doc'
			return response
	return render_to_response('sample_new.html',{'tab':tab, 'form':form, 'user':user, 'end_user_form':end_user_form, 'ship_to_form':ship_to_form })

@login_required
def sample_new(request, project_id):
	tab = 'sample'
	user = request.user
	get_object_or_404(Project, id = project_id)
	project = Project.objects.get(id = project_id)
	today = datetime.date.today()
	form = SampleEditForm(initial = {
		'date' : today,
		'battery' : project.battery_description
		})
	if project.sales_rep and project.primary_contact:
		end_user_form = NonRequiredAddressForm(initial = {
				'non_required_company' : project.primary_contact.company,
				'non_required_attention' : project.primary_contact.firstname+" "+project.primary_contact.lastname,
				'non_required_address_line1' : project.primary_contact.primary_address_line1,
				'non_required_address_line2' : project.primary_contact.primary_address_line2,
				'non_required_city' : project.primary_contact.primary_city,
				'non_required_state' : project.primary_contact.primary_state,
				'non_required_post_code' : project.primary_contact.primary_post_code,
				'non_required_phone' : project.primary_contact.landline,
				'non_required_id' : project.primary_contact.id
				})
		ship_to_form = RequiredAddressForm(initial = {
				'required_company' : project.sales_rep.company,
				'required_attention' : project.sales_rep.firstname+" "+project.sales_rep.lastname,
				'required_address_line1' : project.sales_rep.primary_address_line1,
				'required_address_line2' : project.sales_rep.primary_address_line2,
				'required_city' : project.sales_rep.primary_city,
				'required_state' : project.sales_rep.primary_state,
				'required_post_code' : project.sales_rep.primary_post_code,
				'required_phone' : project.sales_rep.landline,
				'required_id' : project.sales_rep.id
				})
	elif project.primary_contact:
		ship_to_form = RequiredAddressForm(initial = {
				'required_company' : project.primary_contact.company,
				'required_attention' : project.primary_contact.firstname+" "+project.primary_contact.lastname,
				'required_address_line1' : project.primary_contact.primary_address_line1,
				'required_address_line2' : project.primary_contact.primary_address_line2,
				'required_city' : project.primary_contact.primary_city,
				'required_state' : project.primary_contact.primary_state,
				'required_post_code' : project.primary_contact.primary_post_code,
				'required_phone' : project.primary_contact.landline,
				'required_id' : project.primary_contact.id
				})
		end_user_form = NonRequiredAddressForm()
	else:
		ship_to_form = RequiredAddressForm()
		end_user_form = NonRequiredAddressForm()

	if request.method == 'POST':
		form = SampleEditForm(request.POST)
		ship_to_form = RequiredAddressForm(request.POST)
		end_user_form = NonRequiredAddressForm(request.POST)
		if form.is_valid() and ship_to_form.is_valid() and end_user_form.is_valid():
			date = form.cleaned_data['date'] 
			edited_date = form.cleaned_data['date'] 
			battery = form.cleaned_data['battery'] 
			engineer = form.cleaned_data['engineer']
			inside_sales = form.cleaned_data['inside_sales']
			ship_to_company = ship_to_form.cleaned_data['required_company'] 
			ship_to_attention = ship_to_form.cleaned_data['required_attention'] 
			ship_to_address_line1 = ship_to_form.cleaned_data['required_address_line1'] 
			ship_to_address_line2 = ship_to_form.cleaned_data['required_address_line2'] 
			ship_to_city = ship_to_form.cleaned_data['required_city'] 
			ship_to_state = ship_to_form.cleaned_data['required_state'] 
			ship_to_post_code = ship_to_form.cleaned_data['required_post_code'] 
			ship_to_phone = ship_to_form.cleaned_data['required_phone'] 
			end_user_company = end_user_form.cleaned_data['non_required_company'] 
			end_user_attention = end_user_form.cleaned_data['non_required_attention'] 
			end_user_address_line1 = end_user_form.cleaned_data['non_required_address_line1'] 
			end_user_address_line2 = end_user_form.cleaned_data['non_required_address_line2'] 
			end_user_city = end_user_form.cleaned_data['non_required_city'] 
			end_user_state = end_user_form.cleaned_data['non_required_state'] 
			end_user_post_code = end_user_form.cleaned_data['non_required_post_code'] 
			end_user_phone = end_user_form.cleaned_data['non_required_phone'] 
			battery_description = form.cleaned_data['battery_description'] 
			if form.cleaned_data['vkb_number']:
				vkb_number = form.cleaned_data['vkb_number']
				battery_pack = Pack.objects.get(vkb_number = vkb_number)
				battery = battery_pack.battery
			else:
				battery_pack = None
			if form.cleaned_data['type_number']: 
				type_number = form.cleaned_data['type_number'] 
				battery = Battery.objects.get(type_number = type_number)
			if not form.cleaned_data['type_number'] and not form.cleaned_data['vkb_number']:
				battery = None


			sample_number = Sample.get_sample_number()

			new_sample = Sample(
					date = date,
					project = project,
					sample_number = sample_number,
					authored_date = edited_date,
					edited_date = edited_date,
					author = Contact.objects.get(user = user),
					editor = Contact.objects.get(user = user),
					battery = battery,
					battery_description = battery_description,
					battery_pack = battery_pack,
					engineer = engineer,
					inside_sales = inside_sales,
					ship_to_company = ship_to_company,
					ship_to_attention = ship_to_attention,
					ship_to_address_line1 = ship_to_address_line1,
					ship_to_address_line2 = ship_to_address_line2,
					ship_to_city = ship_to_city,
					ship_to_state = ship_to_state,
					ship_to_post_code = ship_to_post_code,
					ship_to_phone = ship_to_phone,
					end_user_company = end_user_company,
					end_user_attention = end_user_attention,
					end_user_address_line1 = end_user_address_line1,
					end_user_address_line2 = end_user_address_line2,
					end_user_city = end_user_city,
					end_user_state = end_user_state,
					end_user_post_code = end_user_post_code,
					end_user_phone = end_user_phone,
					)
			new_sample.save()
			c = Context({'sample':new_sample})
			t = loader.get_template('xml/sample-base.xml')
			render_xml = t.render(c)
			response = HttpResponse(render_xml, mimetype='application/ms-word')
			response['Content-Disposition'] = 'attachment; filename='+ship_to_attention+'-sample.doc'
			return response
	return render_to_response('sample_new.html',{'tab':tab, 'form':form, 'user':user, 'end_user_form':end_user_form, 'ship_to_form':ship_to_form })

@login_required
def sample_word_doc(request, sample_number):
	tab = 'sample'
	user = request.user
	new_sample = Sample.objects.get(sample_number = sample_number)
	c = Context({'sample':new_sample})
	t = loader.get_template('xml/sample-base.xml')
	render_xml = t.render(c)
	response = HttpResponse(render_xml, mimetype='application/ms-word')
	response['Content-Disposition'] = 'attachment; filename='+new_sample.ship_to_attention+'-sample.doc'
	return HttpResponseRedirect(reverse('project_list'))



#QUOTE VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def quote_list(request):
	tab = 'quote'
	user = request.user
	form = SearchForm()
	list = QuoteRow.objects.all()
	if request.method == 'POST':
		form = SearchForm(request.POST)
		if form.is_valid():
			search = request.POST.get('search') 
			if search:
				list = list.filter(quote_number = search)
		return render_to_response('quote_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user})
	else:
		return render_to_response('quote_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user})

@login_required
def quote_new(request, project_id):
	tab = 'quote'
	user = request.user
	get_object_or_404(Project, id = project_id)
	today = datetime.date.today()
	form = QuoteEditForm(initial = {'date' : today})
	project = Project.objects.get(id = project_id)
	if project.primary_contact:
		initial = {
		'required_company' : project.primary_contact.company,
		'required_attention' : project.primary_contact.firstname+" "+project.primary_contact.lastname,
		'required_address_line1' : project.primary_contact.primary_address_line1,
		'required_address_line2' : project.primary_contact.primary_address_line2,
		'required_city' : project.primary_contact.primary_city,
		'required_state' : project.primary_contact.primary_state,
		'required_post_code' : project.primary_contact.primary_post_code,
		'required_phone' : project.primary_contact.landline,
		'required_id' : project.primary_contact.id,
		}
	else:
		initial = {}
	customer_form = RequiredAddressForm(initial = initial)
	form = QuoteEditForm(initial = {
		'date' : today,
		'terms' : 'Net 30',
		'fob' : 'Harrisburg, PA'
		})
	if request.method == 'POST':
		form = QuoteEditForm(request.POST)
		customer_form = RequiredAddressForm(request.POST)
		if form.is_valid() and customer_form.is_valid():
			date = form.cleaned_data['date'] 
			rows = form.cleaned_data['rows']
			customer_company = customer_form.cleaned_data['required_company'] 
			customer_attention = customer_form.cleaned_data['required_attention'] 
			customer_address_line1 = customer_form.cleaned_data['required_address_line1'] 
			customer_address_line2 = customer_form.cleaned_data['required_address_line2'] 
			customer_city = customer_form.cleaned_data['required_city'] 
			customer_state = customer_form.cleaned_data['required_state'] 
			customer_post_code = customer_form.cleaned_data['required_post_code'] 
			customer_phone = customer_form.cleaned_data['required_phone'] 
			signature1 = form.cleaned_data['signature1']
			signature1_title = form.cleaned_data['signature1_title']
			signature2 = form.cleaned_data['signature2']
			signature2_title = form.cleaned_data['signature2_title']
			signature3 = form.cleaned_data['signature3']
			signature3_title = form.cleaned_data['signature3_title']

			spr_number = SPR.get_spr_number()
			quote_number = Quote.get_quote_number()

			new_quote = Quote(
				project = project,
				quote_number = quote_number,
				date = date,
				author = Contact.objects.get(user = user),
				editor = Contact.objects.get(user = user),
				authored_date = date,
				edited_date = date,
				signature1_name = signature1,
				signature1_title = signature1_title,
				signature2_name = signature2,
				signature2_title = signature2_title,
				signature3_name = signature3,
				signature3_title = signature3_title,
				customer_company = customer_company,
				customer_attention = customer_attention,
				customer_address_line1 = customer_address_line1,
				customer_address_line2 = customer_address_line2,
				customer_city = customer_city,
				customer_state = customer_state,
				customer_post_code = customer_post_code,
				customer_phone = customer_phone,
				)
			new_quote.save()

			for i in range(rows):
				battery_description = request.POST.get('battery_description'+str(i+1))
				if request.POST.get('type_number'+str(i+1)): 
					type_number = request.POST.get('type_number'+str(i+1))
					battery = Battery.objects.get(type_number = type_number)
				else:
					battery = None
				if request.POST.get('vkb_number'+str(i+1)):
					vkb_number = request.POST.get('vkb_number'+str(i+1))
					battery_pack = Pack.objects.get(vkb_number = vkb_number)
					battery = battery_pack.battery
				else:
					battery_pack = None
				if not request.POST.get('type_number'+str(i+1)) and not request.POST.get('vkb_number'+str(i+1)):
					battery = None
					battery_pack = None
				quantity = request.POST.get('quantity'+str(i+1))
				price = request.POST.get('price'+str(i+1))
				new_quote_row = QuoteRow(
					quote = new_quote,
					battery_description = battery_description,
					battery = battery,
					battery_pack = battery_pack,
					quantity = quantity,
					price = price,
					)
				new_quote_row.save()

			rows = new_quote.quoterow_set.all()
			c = Context({'quote':new_quote, 'rows':rows})
			t = loader.get_template('xml/quote-base.xml')
			render_xml = t.render(c)
			response = HttpResponse(render_xml, mimetype='application/ms-word')
			response['Content-Disposition'] = 'attachment; filename='+str(quote_number)+'-quote.doc'
			return response
	return render_to_response('quote_new.html',{'tab':tab, 'form':form, 'customer_form':customer_form, 'user':user})

#SPR VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def spr_list(request):
	tab = 'spr'
	user = request.user
	form = SearchForm()
	list = SPRRow.objects.all()
	if request.method == 'POST':
		form = SearchForm(request.POST)
		if form.is_valid():
			search = request.POST.get('search') 
			if search:
				list = list.filter(spr_number = search)
		return render_to_response('spr_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user})
	else:
		return render_to_response('spr_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user})

@login_required
def spr_new(request, project_id):
	tab = 'spr'
	user = request.user
	get_object_or_404(Project, id = project_id)
	today = datetime.date.today()
	project = Project.objects.get(id = project_id)
	if project.primary_contact:
		initial = {
		'required_company' : project.primary_contact.company,
		'required_attention' : project.primary_contact.firstname+" "+project.primary_contact.lastname,
		'required_address_line1' : project.primary_contact.primary_address_line1,
		'required_address_line2' : project.primary_contact.primary_address_line2,
		'required_city' : project.primary_contact.primary_city,
		'required_state' : project.primary_contact.primary_state,
		'required_post_code' : project.primary_contact.primary_post_code,
		'required_phone' : project.primary_contact.landline,
		'required_id' : project.primary_contact.id,
		}
	else:
		initial = {}
	customer_form = RequiredAddressForm(initial = initial)
	form = SprEditForm(initial = {
		'date' : today,
		'terms' : 'Net 30',
		'fob' : 'Harrisburg, PA'
		})
	if request.method == 'POST':
		form = SprEditForm(request.POST)
		customer_form = RequiredAddressForm(request.POST)
		if form.is_valid() and customer_form.is_valid():
			date = form.cleaned_data['date'] 
			rows = form.cleaned_data['rows']
			customer_company = customer_form.cleaned_data['required_company'] 
			customer_attention = customer_form.cleaned_data['required_attention'] 
			customer_address_line1 = customer_form.cleaned_data['required_address_line1'] 
			customer_address_line2 = customer_form.cleaned_data['required_address_line2'] 
			customer_city = customer_form.cleaned_data['required_city'] 
			customer_state = customer_form.cleaned_data['required_state'] 
			customer_post_code = customer_form.cleaned_data['required_post_code'] 
			customer_phone = customer_form.cleaned_data['required_phone'] 

			spr_number = SPR.get_spr_number()

			new_spr = SPR(
					project = project,
					spr_number = spr_number,
					authored_date = date,
					edited_date = date,
					author = Contact.objects.get(user = user),
					editor = Contact.objects.get(user = user),
					customer_company = customer_company,
					customer_attention = customer_attention,
					customer_address_line1 = customer_address_line1,
					customer_address_line2 = customer_address_line2,
					customer_city = customer_city,
					customer_state = customer_state,
					customer_post_code = customer_post_code,
					customer_phone = customer_phone,
					)
			new_spr.save()

			for i in range(rows):
				battery_description = request.POST.get('battery_description'+str(i+1))
				if request.POST.get('type_number'+str(i+1)): 
					type_number = request.POST.get('type_number'+str(i+1))
					battery = Battery.objects.get(type_number = type_number)
				else:
					battery = None
				if request.POST.get('vkb_number'+str(i+1)):
					vkb_number = request.POST.get('vkb_number'+str(i+1))
					battery_pack = Pack.objects.get(vkb_number = vkb_number)
					battery = battery_pack.battery
				else:
					battery_pack = None
				if not request.POST.get('type_number'+str(i+1)) and not request.POST.get('vkb_number'+str(i+1)):
					battery = None
				margin = request.POST.get('margin'+str(i+1))
				quantity = request.POST.get('quantity'+str(i+1))
				price = request.POST.get('price'+str(i+1))
				new_spr_row = SPRRow(
					spr = new_spr,
					margin = margin,
					quantity = quantity,
					price = price,
					battery_description = battery_description,
					battery = battery,
					battery_pack = battery_pack,
					)
				new_spr_row.save()
			rows = new_spr.sprrow_set.all()

			c = Context({'spr':new_spr, 'rows':rows})
			t = loader.get_template('xml/spr-base.xml')
			render_xml = t.render(c)
			response = HttpResponse(render_xml, mimetype='application/ms-word')
			response['Content-Disposition'] = 'attachment; filename='+str(spr_number)+'-spr.doc'
			return response
	return render_to_response('spr_new.html',{'tab':tab, 'form':form, 'user':user,'customer_form':customer_form})

@login_required
def spr_word_doc(request, spr_number):
	tab = 'spr'
	user = request.user
	new_spr = Sample.objects.get(spr_number = spr_number)
	c = Context({'spr':new_spr})
	t = loader.get_template('xml/spr-base.xml')
	render_xml = t.render(c)
	response = HttpResponse(render_xml, mimetype='application/ms-word')
	response['Content-Disposition'] = 'attachment; filename='+new_spr.ship_to_attention+'-spr.doc'
	return response

#UPLOAD VIEWS!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
@login_required
def upload_new(request):
	tab = 'upload'
	user = request.user
	form = UploadEditForm()
	if request.method == 'POST':
		form = UploadEditForm(request.POST, request.FILES)
		if form.is_valid():
			file = request.FILES['file']
			file_title = form.cleaned_data['file_title']
			new_upload = Upload(
				file_title = file_title,
				)
			new_upload.save()
			new_upload.file.save(file.name, file)

			return HttpResponseRedirect(reverse('upload_list'))
		else:
			return render_to_response('upload_new.html', {'tab':tab,'form': form, 'user':user})
	else:
		return render_to_response('upload_new.html', {'tab':tab,'form': form, 'user':user})

@login_required
def upload_list(request):
	tab = 'upload'
	user = request.user
	form = SearchForm()
	list = Upload.objects.all()
	if request.method == 'POST':
		form = SearchForm(request.POST)
		if form.is_valid():
			search = request.POST.get('search') 
			if search:
				list = list.filter(spr_number = search)
		return render_to_response('upload_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user})
	else:
		return render_to_response('upload_list.html',{'tab':tab, 'list':list, 'form':form, 'user':user})

@login_required
def upload_view(request, file_name):
	tab = 'upload'
	user = request.user
	#datasheets and drawings are saved as pdf's but have 5 or 11 digit file_names w/o file extensions
	if re.match('uploads/',file_name):
		file_name = re.split('uploads/', file_name)[1]
	if re.match(r'^\d{5}$',file_name) or re.match(r'^\d{11}$',file_name):
		file_name = file_name+'.pdf'
	if re.match(r'^\d{4}$',file_name):
		file_name = '0'+file_name+'.pdf'
	file = open(UPLOAD_DIR+'/'+file_name, 'rb').read()
	if re.search('.pdf', file_name):
		return HttpResponse(file, mimetype="application/pdf")
	else:
		response = HttpResponse(file)
		response['Content-Disposition'] = 'attachment; filename='+file_name
		return response
		

@login_required
def handle_uploaded_file(file):
	user = request.user
	destination = open(settings.MEDIA_ROOT+'uploads/file.txt', 'wb+')
	for chunk in file.chunks():
		destination.write(chunk)
	destination.close()

